/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc09_group2;

import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.Console;
import java.io.File;
import java.io.FileWriter;

import java.io.FileNotFoundException;

public class App {
    Snacks snack = new Snacks();
    static RemindTimer remindTimer;
    static List<Snacks> allSnacks = new ArrayList<>();
    static boolean transactionCompleted = false;

    public static void main(String[] args) {
        transactionCompleted = false;
        Cart cart = new Cart();
        App app = new App();
        List<Snacks> newsnack = Snacks.readSnacksFromCSV("SnacksInfo.csv");
        for (Snacks s : newsnack) {
            System.out.println(s);
        }

        int loginCommand = 0;
        boolean invalidLoginCommand = true;

        Customer customer = new Customer("app/CustomerInfo.csv");
        System.out.println("__________________________________________________________________________");
        System.out.println("\nWelcome to our vending machine!");
        Scanner sc = new Scanner(System.in);

        
        // print menu options
        System.out.println("Please select one of the options below:");
        System.out.println("\t1: Log in");
        System.out.println("\t2: Create an account");
        System.out.println("\t3: Continue as guest");

        // error checking for command input
        while (invalidLoginCommand) {
            System.out.print("\nEnter your choice: ");
            if (sc.hasNextInt()) {
                loginCommand = sc.nextInt();
                invalidLoginCommand = false;
            } else {
                System.out.println("\nInvalid Choice: Choose from '1', '2' or '3'.");
                sc.next();
                continue;
            }

            // error checking for username
            boolean invalidUsernameAndPassword = true;
            if (loginCommand == 1 || loginCommand == 2) {
                invalidLoginCommand = false;

                while (invalidUsernameAndPassword) {
                    boolean invalidUsername = true;
                    while (invalidUsername) {
                        System.out.println("\nUsername:");
                        if (sc.hasNext()) {
                            customer.setUsername(sc.next());
                        }
                        if (loginCommand == 2 && customer.checkUsernameExists()) {
                            System.out.println(
                                    "\nA user with this username already exists. Please try another username.");
                        } else {
                            invalidUsername = false;
                        }
                    }

                    // error checking for password
                    Console console = System.console();
                    if (console == null) {
                        System.out.println("Error: Unable to access console instance.");
                        sc.close();
                        return;
                    }

                    boolean invalidPassword = true;
                    while (invalidPassword) {
                        customer.setPassword(console.readPassword("Password: "));
                        if (customer.getPasswordLength() == 0) {
                            System.out.println("Password must not be empty. Please try again.\n");
                        } else {
                            for (int i = 0; i < customer.getPasswordLength(); i++) {
                                System.out.print("*");
                            }
                            System.out.println();

                            // sign up
                            if (loginCommand == 2) {
                                customer.addToCSV();
                                System.out.println("\nSuccessfully created new account.");
                                invalidPassword = false;
                                invalidUsernameAndPassword = false;
                                // login
                            } else if (loginCommand == 1) {
                                if (!customer.checkValidLogin()) {
                                    System.out.println(
                                            "The username or password you entered is incorrect. Please try again.");
                                    invalidPassword = false;
                                } else {
                                    System.out.println("\nSuccessfully logged in.");
                                    invalidPassword = false;
                                    invalidUsernameAndPassword = false;
                                }
                            }
                        }
                    }
                }

            }

            else if (loginCommand != 3) {
                System.out.println("Invalid Choice: Choose from '1', '2' or '3'.");
                invalidLoginCommand = true;
            } else {
                System.out.println("Successfully logged in as guest.");
            }
            //cart.SoldItems(transactionCompleted);
        }


        

        // check user role
        boolean isUserRole = false;
        try {
            Scanner scanner = new Scanner(new File("UserRole.csv"));
            while (scanner.hasNextLine()) {
                String[] temp = scanner.nextLine().split(",");
                if (temp[0].equals(customer.getUsername())) {
                    if (temp[1].equals("seller")) {
                        isUserRole = true;
                        app.Seller();
                    } else if (temp[1].equals("owner")) {
                        isUserRole = true;
                        app.Owner();
                    } else if (temp[1].equals("cashier")) {
                        isUserRole = true;
                        app.cashier();
                    }
                    // else if (temp[1].equals("customer")){
                    // isUserRole = true;
                    // app.purchaseSnacks();
                    // customer.countDown();
                    // }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        // guest login
        // TODO remove isUserRole once 'customer' is working above
        if (loginCommand == 3 || !isUserRole) {
            // Customer.countDown();
            // TODO uncomment line below for real app
            app.purchaseSnacks(cart, customer);

            // NOTE TESTING
            // app.cashier();

            //app.cashTransaction(5);
            
            // app.cardTransaction(5);
        }

        sc.close();
    }

    public void purchaseSnacks(Cart cart, Customer customer) {

        Scanner sc = new Scanner(System.in);
        boolean continueLoop = true;

        while (continueLoop == true) {
            int category = 0;
            System.out.println("What would you like to purchase?:");
            System.out.println("\t1: Drinks");
            System.out.println("\t2: Chocolates");
            System.out.println("\t3: Chips");
            System.out.println("\t4: Candies");
            System.out.println("\t5: Shopping Cart");
            System.out.print("\nEnter your choice: ");
            if (sc.hasNextInt()) {
                category = sc.nextInt();
                if (category < 1 || category > 5) {
                    System.out.println("\nInvalid Choice: Please enter the number '1', '2', '3' or '4'.");
                    sc.close();
                    System.exit(0);
                }
            } else {
                System.out.println("\nInvalid Choice: Please enter the number '1', '2', '3' or '4'.");
                sc.close();
                System.exit(0);
            }

            if (category == 5) {
                System.out.println("You have the following in your shopping cart: ");
                cart.displayCart();
                System.out.println("What would u like to do?");
                System.out.println("\t1: Remove Item");
                System.out.println("\t2: Continue Shopping");
                System.out.print("Enter: ");
                int code0 = Integer.parseInt(sc.next());
                if (code0 == 1) {
                    if (cart.getSize() == 0) {
                        System.out.println("You do not have anything inside your cart");
                    } else {
                        System.out.println("Enter Code for Item you would like to remove from cart: ");
                        cart.displayCart();
                        System.out.print("Enter: ");
                        if (sc.hasNextInt()) {
                            int code2 = sc.nextInt();
                            Snacks.SnackRemove(code2, cart);
                        } else {
                            sc.close();
                            System.exit(0);
                        }
                    }
                } else if (code0 == 2) {

                } else {
                    System.out.println("\nInvalid Choice: Please enter the number '1' or '2'.");
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                }

            }

            else if (category == 1) {
                System.out.println("The following is our drink selection: ");
                Snacks.displayDrinks();
                System.out.println("Please enter the code to select drink or enter 0 to cancel order.");
                System.out.print("Enter: ");
                int code = Integer.parseInt(sc.next());
                if (code == 0) {
                    System.out.println("Order was canceled");
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                    return;
                } else {
                    Snacks.getObjectByCode(code, cart);
                }
            }

            else if (category == 2) {
                System.out.println("The following is our chocolate selection: ");
                Snacks.displayChocolates();
                System.out.println("Please enter the code to select chocolate or enter 0 to cancel order.");
                System.out.print("Enter: ");
                int code = Integer.parseInt(sc.next());
                if (code == 0) {
                    System.out.println("Order was canceled");
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                    return;
                } else {
                    Snacks.getObjectByCode(code, cart);
                }
            }

            else if (category == 3) {
                System.out.println("The following is our chips selection: ");
                Snacks.displayChips();
                System.out.println("Please enter the code to select chips or enter 0 to cancel order.");
                System.out.print("Enter: ");
                int code = Integer.parseInt(sc.next());
                if (code == 0) {
                    System.out.println("Order was canceled");
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                    return;
                } else {
                    Snacks.getObjectByCode(code, cart);
                }
            }

            else if (category == 4) {
                System.out.println("The following is our candies selection: ");
                Snacks.displayCandies();
                System.out.println("Please enter the code to select candies or enter 0 to cancel order.");
                System.out.print("Enter: ");
                int code = Integer.parseInt(sc.next());
                if (code == 0) {
                    sc.close();
                    System.out.println("Order was canceled");
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                    return;
                } else {
                    Snacks.getObjectByCode(code, cart);
                }
            }

            else {
                System.out.println("Please enter a valid number.");
                break;
            }
            int check = 0;
            System.out.println("Would you like to purchase more items?:");
            System.out.println("\t1: Yes");
            System.out.println("\t2: No");
            System.out.print("Enter: ");

            try {
                check = Integer.parseInt(sc.next());
            } catch (NumberFormatException e) {
                System.out.println("\nInvalid Choice: Please enter the numbers '1' or '2'.");
                sc.close();
                return;
            }

            if (check == 1) {
                continueLoop = true;
            } else if (check == 2) {
                continueLoop = false;
                System.out.println("You currently have the following in your cart: ");
                cart.displayCart();
                System.out.printf("Your total is: %.2f\n", (double) cart.getTotal());
                System.out.println("Proceeding to Transaction process...");
                break;
            } else {
                System.out.println("Invalid Choice: Please enter the numbers '1' or '2'.");
                // for (int i = 0; i < Customer.cart.size(); i++) {
                // System.out.println(Customer.cart.get(i).itemName + " with the price of "
                // + Customer.cart.get(i).itemPrice + " .");
                // }
                System.out.println("");
                System.out.println("____________________________________________________");
                System.out.println("...Transaction was canceled");
                cart.emptyCart();
                purchaseSnacks(cart, customer);
                continueLoop = false;
            }

        }
        double total = (double) cart.getTotal();
        if (total == 0.00) {
            System.out.printf("\nYour total is: %.2f\n", total);
            System.out.println("No Payment Required");
            System.out.println("See you next time!");
        } else {
            System.out.printf("\nYour total is: %.2f\n", total);

            int paymentType = 0;
            System.out.println("Please select your payment type");
            System.out.println("\t1: Card");
            System.out.println("\t2: Cash");
            System.out.print("\nEnter your choice: ");

            try {
                paymentType = Integer.parseInt(sc.next());
            } catch (NumberFormatException e) {
                System.out.println("\nInvalid Choice: Please enter the numbers '1', '2', '3' or '4' .");
            }

            if (paymentType == 1) {
                // System.out.println("Error: Card payment out of order.");
                this.cardTransaction(total, cart, customer);

            } else if (paymentType == 2) {
                // System.out.println("Error: Cash payment out of order.");
                // INPUT CASH TRANSACTION
                this.cashTransaction(total, cart, customer);

                // this is for testing
                //this.cashTransaction(5);

            } else {
                System.out.println("\nInvalid Choice: Please enter the numbers '1' or '2'.");
                cart.emptyCart();
                purchaseSnacks(cart, customer);
            }
            sc.close();

        }
    }

    // returns true if transaction completed
    // returns false if cancelled
    public boolean cashTransaction(double total, Cart cart, Customer customer) {
        Scanner sc = new Scanner(System.in);
        boolean continueLoop = true;
        double cash_in = 0;

        ArrayList<Double> cash_list = new ArrayList<Double>();
        CashPayment payment = new CashPayment("app/cash.csv");

        ///// TEST NO CASH //////
        // CashPayment payment = new CashPayment("app/cash_test_none.csv");

        while (continueLoop) {
            System.out.println("Please insert cash, or enter 0 to cancel.");

            // boolean insertNotesLoop = true;
            // while (insertNotesLoop) {
            System.out.println("\t$0.05");
            System.out.println("\t$0.10");
            System.out.println("\t$0.20");
            System.out.println("\t$0.50");
            System.out.println("\t$1.00");
            System.out.println("\t$2.00");
            System.out.println("\t$5.00");
            System.out.println("\t$10.00");
            System.out.println("\t$20.00");
            System.out.println("\t$50.00");
            System.out.println("\t$100.00");
            System.out.print("\nEnter the cash amount inserted: $");

            // error checking for command input
            if (sc.hasNextDouble()) {
                cash_in = sc.nextDouble();
                int index = payment.find_index(cash_in);
                // check denomination
                if (cash_in == 0) {
                    System.out.println("\n__________________________________________________________________________");
                    System.out.println("...Transaction was canceled\n"); // NOTE cancellation reason: "user cancelled"
                    cart.emptyCart();
                    purchaseSnacks(cart, customer);
                    continueLoop = false;
                    return false;
                } else if (index == -1) {
                    System.out.println("\nInvalid choice.\nPlease choose from one of the denominations below.\n");
                    continue;
                } else {
                    cash_list.add(cash_in);
                }
            } else {
                System.out.println("\nInvalid choice.\nPlease choose from one of the denominations below.\n");
                sc.next();
                continue;
            }

            System.out.printf("Total amount owed: $%.2f\n", total);
            System.out.printf("Total amount inserted: $%.2f\n", payment.getTotal(cash_list));

            // TODO if cash inserted is less than the total
            if (!payment.enough_cash_in(cash_list, total)) {
                System.out.println("__________________________________________________________________________");
                System.out.printf("\nTotal: $%.2f\n", total);
                System.out.printf("Amount Paid: $%.2f\n", payment.getTotal(cash_list));
                System.out.printf("Balance Due: $%.2f\n", total - payment.getTotal(cash_list)); // TODO error message
                System.out.println("\nPlease insert the remaining balance to continue, or enter 0 to cancel.");
                System.out.println("__________________________________________________________________________\n");
                // if not enough change
            } else if (!payment.enough_change(cash_list, total)) {
                System.out.println("__________________________________________________________________________\n");
                System.out.println("There is no available change for the inserted money.\n");
                System.out.println("Cash returned:");
                payment.print_change(cash_list);
                cash_list.clear();
                System.out.println("\nPlease select one of the options below:");
                System.out.println("\t1: Insert different notes/coins to complete the payment");
                System.out.println("\t2: Cancel the transaction");


                int changeCommand;
                boolean runningChangeCommand = true;
                while (runningChangeCommand) {
                    System.out.print("\nEnter: ");
                    if (sc.hasNextInt()) {
                        changeCommand = sc.nextInt();
                        if (changeCommand == 1) {
                            runningChangeCommand = false;
                        } else if (changeCommand == 2) {
                            // cancel transaction
                            System.out.println(
                                    "\n__________________________________________________________________________\n");
                            System.out.println("...Transaction was canceled"); // NOTE cancellation reason: "change not available"
                            runningChangeCommand = false;
                            continueLoop = false;
                        } else {
                            System.out.printf("\n%d is an invalid choice. Please enter the number '1' or '2'.",
                                    changeCommand);
                        }
                    } else {
                        System.out.println("\nInvalid choice. Please enter the number '1' or '2'.");
                        sc.next();
                        continue;
                    }
                }
            } else {
                System.out.println("\n__________________________________________________________________________");
                System.out.println("\nTransaction successful.");
                transactionCompleted = true;
                // for(int i = 0; i < customer.cart.size(); i++) {
                //     Snacks.CodetoQuantity(customer.cart.get(i).itemCode, cart);
                // }
                // Snacks.CodetoQuantity(0, cart);
                System.out.println("Thank you for shopping with us!\n");
                System.out.println("Here is your change:");
                ArrayList<Double> change = payment.transaction(cash_list, total);
                payment.print_change(change);
                // System.out.println(change.size());
                System.out.println("\nSee you next time :)");
                System.out.println("\nLogged out");
                continueLoop = false;


            }
        }

        sc.close();
        return true;

    }

   
    // returns true if transaction completed
    // returns false if cancelled
    private boolean cardTransaction(double total, Cart cart, Customer customer) {
        boolean cardNumInvalid = true;
        boolean isSavedCard = false;
        String name = null;
        String cardNumStr = null;
        char[] cardNum;
        Scanner sc = new Scanner(System.in);

        // TODO check if card is already attached to account

        while (cardNumInvalid) {
            // username
            System.out.println("\nInput cardholder name:");
            name = sc.next();

            // password
            Console console = System.console();
            if (console != null) {
                cardNum = console.readPassword("Input credit card number: ");
                for (int i = 0; i < cardNum.length; i++) {
                    System.out.print("*");
                }
                System.out.println();
                cardNumStr = new String(cardNum);
            } else {
                System.out.println("Error: Unable to access console instance.");
            }
            // check if card details match
            if (CreditCardPayment.check(name, cardNumStr)) {
                cardNumInvalid = false;
            } else {
                System.out.println("\nInvalid Card name and number.");
            }
        }

        // confirm & complete transaction
        if (!cardNumInvalid || isSavedCard) {
            System.out.println("Credit card details match.");
            System.out.println("\nConfirm transaction?");
            System.out.println("\t1: Yes");
            System.out.println("\t2: No");

            boolean transactionUnconfirmed = true;
            int confirmCommand;
            while (transactionUnconfirmed) {
                System.out.print("\nEnter: ");
                if (sc.hasNextInt()) {
                    confirmCommand = sc.nextInt();
                    if (confirmCommand == 1) {
                        // TODO insert save card command
                        System.out.println("____________________________________________________\n");
                        System.out.printf("Total order amount: $%.2f\n", total);
                        System.out.printf("Amount paid: $%.2f\n", total);
                        System.out.println("Transaction successful.");
                        System.out.println("Logged out.");
                        transactionCompleted = true;
                        System.out.println(customer.getUsername());
                        System.out.println(customer.cart.size());
                        for(int i = 0; i < customer.cart.size(); i++) {
                            // Snacks.CodetoQuantity(customer.cart.get(i).itemCode, cart);
                            // System.out.println("try");
                        }
                        transactionUnconfirmed = false;
                    } else if (confirmCommand == 2) {
                        System.out.println("Transaction cancelled."); // NOTE cancellation reason: "user cancelled"
                        // transactionUnconfirmed = false;
                        cart.emptyCart();
                        purchaseSnacks(cart, customer);
                        sc.close();
                        return false;
                    } else {
                        System.out.printf("\n%d is an invalid choice. Please enter the number '1' or '2'.",
                                confirmCommand);
                    }
                } else {
                    System.out.print("\nInvalid choice. Please enter the number '1' or '2'.");
                    sc.next();
                }
            }
        }

        // ask to save card information
        if (!isSavedCard) {
            int saveCommand = 0;
            boolean runningSaveCommand = true;
            System.out.println("\nWould you like to save this credit card number?:");
            System.out.println("\t1: Yes");
            System.out.println("\t2: No");

            while (runningSaveCommand) {
                System.out.print("\nEnter: ");
                if (sc.hasNextInt()) {
                    saveCommand = sc.nextInt();
                    if (saveCommand == 1) {
                        // TODO insert save card command
                        System.out.println("Card successfully saved.");
                        runningSaveCommand = false;
                    } else if (saveCommand == 2) {
                        runningSaveCommand = false;
                        System.out.println("Card not saved.");
                    } else {
                        System.out.printf("\n%d is an invalid choice. Please enter the number '1' or '2'.",
                                saveCommand);
                    }
                } else {
                    System.out.print("\nInvalid choice. Please enter the number '1' or '2'.");
                    sc.next();
                }
            }
        }
        System.out.println("Thank you for shopping with us!\n");
        transactionCompleted = true;

        sc.close();


        // return to purchase menu
        // this.purchaseSnacks();
        return true;

    }



    public void cashier() {
        Scanner sc = new Scanner(System.in);
        CashPayment payment = new CashPayment("app/cash.csv");
        Cashier cashier = new Cashier("app/cash.csv");
        int cashierCommand = 0;
        boolean runningCashierCommand = true;

        

        System.out.println("Please select one of the options below:");
        System.out.println("\t1: View the current available change");
        System.out.println("\t2: Modify quantity of notes/coins in vending machine");
        System.out.println("\t3: View transaction summary");

        while (runningCashierCommand) {
            System.out.print("\nEnter your choice: ");
            if (sc.hasNextInt()) {
                cashierCommand = sc.nextInt();
                // Print change report
                if (cashierCommand == 1) {
                    cashier.change_report();
                    runningCashierCommand = false;
                }
                // Modify change quantities
                else if (cashierCommand == 2) {
                    boolean modifyingCash = true;

                    while (modifyingCash) {
                        int quantity = 0;
                        int index = 0;
                        double denomination = 0;

                        boolean runningDenominationLoop = true;
                        boolean runningQuantityLoop = true;
                        boolean validDenomination = false;

                        System.out.println("__________________________________________________________________________");
                        System.out.println("\nPlease select the note/coin quantity you want to modify, or enter 0 to stop modifying.");
                        System.out.println("\t$0.05");
                        System.out.println("\t$0.10");
                        System.out.println("\t$0.20");
                        System.out.println("\t$0.50");
                        System.out.println("\t$1.00");
                        System.out.println("\t$2.00");
                        System.out.println("\t$5.00");
                        System.out.println("\t$10.00");
                        System.out.println("\t$20.00");
                        System.out.println("\t$50.00");
                        System.out.println("\t$100.00");
                        
                        // error checking for command input
                        while (runningDenominationLoop) {
                            System.out.print("\nEnter: $");
                            if (sc.hasNextDouble()) {
                                denomination = sc.nextDouble();
                                index = payment.find_index(denomination);
                                // check denomination
                                if (denomination == 0) {
                                    System.out.println(
                                            "__________________________________________________________________________\n");
                                    System.out.println("...Finished filling/modifying cash.\n");
                                    runningDenominationLoop = false;
                                    modifyingCash = false;
                                } else if (index == -1) {
                                    System.out.println(
                                            "\nInvalid choice.\nPlease choose from one of the denominations below.");
                                    continue;
                                } else {
                                    validDenomination = true;
                                    runningDenominationLoop = false;
                                }
                            } else {
                                System.out
                                        .println(
                                                "\nInvalid choice.\nPlease choose from one of the denominations below.");
                                sc.next();
                                continue;
                            }

                        }

                        // Enter new cash quantity
                        if (validDenomination) {
                            while (runningQuantityLoop) {
                                System.out.print("Please enter the new cash quantity: ");
                                if (sc.hasNextInt()) {
                                    quantity = sc.nextInt();
                                    if (quantity < 0 || quantity > 100) {
                                        System.out.println(
                                                "\nInvalid choice.\nQuantity must be between 0 and 100.\n");
                                        continue;
                                    } else {
                                        // TODO insert modify function
                                        cashier.modify_change(denomination, quantity);
                                        if (index <= 5) {
                                            System.out.printf(
                                                    "\nSUCCESS! Cash quantity of $%.2f coin successfully modified to %d.\n",
                                                    denomination, quantity);
                                        } else {
                                            System.out.printf(
                                                    "\nSUCCESS! Cash quantity of $%.2f note successfully modified to %d.\n",
                                                    denomination, quantity);
                                        }
                                        runningQuantityLoop = false;
                                        runningCashierCommand = false;
                                    }
                                } else {
                                    System.out.println("\nInvalid choice.\nQuantity must be a whole number between 0 and 100.\n");
                                    sc.next();
                                    continue;
                                }
                            }
                        }
                    }

                } else if (cashierCommand == 3) {
                    // TODO insert "View transaction summary" function
                    runningCashierCommand = false;

                } else {
                    System.out.printf("\n%d is an invalid choice. Please enter the number '1', '2' or '3'.", cashierCommand);
                }
            } else {
                System.out.println("\nInvalid choice. Please enter the number '1', '2' or '3'.");
                sc.next();
            }
        }

        // menu command
        boolean runningMenuCommand = true;
        int menuCommand = 0;

        System.out.println("Please select one of the options below:");
        System.out.println("\t1: Return to Cashier menu");
        System.out.println("\t2: Log out of vending machine program");

        while (runningMenuCommand) {
            System.out.print("\nEnter your choice: ");
            if (sc.hasNextInt()) {
                menuCommand = sc.nextInt();
                // check denomination
                if (menuCommand == 1) {
                    runningMenuCommand = false;
                    System.out.println(
                                            "__________________________________________________________________________\n");
                    this.cashier();
                } else if (menuCommand == 2) {
                    runningMenuCommand = false;
                    System.out.println(
                                            "__________________________________________________________________________\n");
                    System.out.println("...Logged out");
                    // TODO return to login page?
                } else {
                    System.out.printf("\n%d is an invalid choice. Please enter the number '1' or '2'.", menuCommand);
                }
            } else {
                System.out.print("\nInvalid choice. Please enter the number '1' or '2'.");
                sc.next();
            }
        }
        sc.close();

    }

    public void Seller() {
        boolean loop = true;
        while(loop == true){
                Seller seller = new Seller();
            Scanner scan = new Scanner(System.in);
            System.out.println("Login in as a seller.");
            allSnacks = Snacks.readSnacksFromCSV("SnacksInfo.csv");
            seller.displayitems();

            System.out.println("You want Modify items, Fill new items or Print sales summary?[M/F/S/quit]");
            String operation = scan.nextLine();
            if (operation.equals("M")) {
                adjustItems("Snacksinfo.csv");
            } else if (operation.equals("F")) {

                fillnew("Snacksinfo.csv");
            } 
            else if (operation.equals("S")) {
                seller.QuantityReport();;
            }
            else if (operation.equals("quit")) {
                loop = false;
            } 
            else {
                System.out.println("unknown operation. Please input again![M/F/S/quit]");
            }
        }

        
    }

    public void Owner() {
        boolean loop = true;
        while(loop == true) {
            System.out.println("Welcome to the system!");
        Owner ow = new Owner();
        Scanner owneroperation = new Scanner(System.in);
        System.out.println("Input operation for set user or display report[S/D/quit]:");
        String operation = owneroperation.nextLine();
        if (operation.equals("S")) {
            System.out.println("Which user you choose to assign a role?");
            String username = owneroperation.nextLine();
            try {
                Scanner user = new Scanner(new File("app/CustomerInfo.csv"));
                String[] temp = user.nextLine().split(",");
                temp = user.nextLine().split(",");
                while ((user.hasNextLine()) && (!temp[0].equals(username))) {
                    temp = user.nextLine().split(",");

                }
                if (temp[0].equals(username)) {
                    System.out.println("What role do you want to assign(seller/cashier/owner)?");
                    String role = owneroperation.nextLine();
                    ow.setUserRole(username, role);

                } else {
                    System.out.println("User not exist.");
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }

        } 
        else if (operation.equals("D")) {
            Owner.getUserRole();
        }
        else if (operation.equals("quit")) {
            loop = false;
        }
        }
    }

    public void fillnew(String datapath) {
        int quantitysold;
        List<Snacks> reportList = new ArrayList<>();
        List<Snacks> allSnacks = new ArrayList<>();
        String newname;
        String newcode;
        String newcategory;
        String newquantity;
        String newprice;
        Scanner sc = new Scanner(System.in);
        System.out.println("What name would you like to add?");
        newname = sc.nextLine();
        System.out.println("What code would you like to add?");
        newcode = sc.nextLine();
        System.out.println("What category would you like to add?");
        newcategory = sc.nextLine();
        System.out.println("What quantity would you like to add?");
        newquantity = sc.nextLine();
        Integer quantity = Integer.parseInt(newquantity);
        while (quantity > 15) {
            System.out.println("Quantity had reach the limit. (Limits:15).");
            System.out.println("What quantity would you like to add?");
            newquantity = sc.nextLine();
            quantity = Integer.parseInt(newquantity);
        }

        System.out.println("What price would you like to add?");
        newprice = sc.nextLine();
        Double price = Double.parseDouble(newprice);
        Double result = price / 0.05;
        while ((result % 1) != 0) {
            System.out.println("Unvalid price, please input again");
            System.out.println("What price would you like to change to?");
            newprice = sc.nextLine();
            price = Double.parseDouble(newprice);
        }

        File file = new File(datapath);
        try {
            FileWriter fw = new FileWriter(file, true);
            fw.write(newname + "," + newcode + "," + newcategory + "," + newquantity + "," + newprice);
            fw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void adjustItems(String datapath){
        int quantitysold;
        List<Snacks> allSnacks = new ArrayList<>();
        List<Snacks> reportList = new ArrayList<>();
        String newname = null;
        String newcode = null;
        String newcategory = null;
        String newquantity = null;
        String newprice = null;
        
        Scanner sc = new Scanner(System.in);
        System.out.println("which item you want to adjust?[input item name]");
        String itemname = sc.nextLine();
        allSnacks = Snacks.readSnacksFromCSV("SnacksInfo.csv");
        for(int i = 0; i < allSnacks.size(); i++) {
            if (allSnacks.get(i).getSnackName().equals(itemname)){
    
                System.out.println("What name would you like to change to?");
                newname = sc.nextLine();
                System.out.println("What code would you like to change to?");
                newcode = sc.nextLine();
                System.out.println("What category would you like to change to?");
                newcategory = sc.nextLine();
                System.out.println("What quantity would you like to change to?");
                newquantity = sc.nextLine();
                Integer quantity = Integer.parseInt(newquantity);
                while(quantity > 15){
                    System.out.println("Quantity had reach the limit. (Limits:15).");
                    System.out.println("What quantity would you like to change to?");
                    newquantity = sc.nextLine();
                    quantity = Integer.parseInt(newquantity);
                }

                
                System.out.println("What price would you like to change to?");
                newprice = sc.nextLine();
                Double price = Double.parseDouble(newprice);
                Double result = price/0.05;
                while((result%1)!=0){
                    System.out.println("Unvalid price, please input again");
                    System.out.println("What price would you like to change to?");
                    newprice = sc.nextLine();
                    price = Double.parseDouble(newprice);
                }
                    
                break;                
            }
        }
        Seller.edit("Snacksinfo.csv", itemname, newname, newcode,newcategory, newquantity, newprice);
        
    }

    public void ask(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Which user you want to remove?");
        String username = sc.nextLine();
        // Owner.deleteUserRole("UserRole.csv",username);
    }


}
