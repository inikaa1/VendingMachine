/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc09_group2;

import org.json.simple.JSONArray;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.io.FileNotFoundException;


class AppTest {
    
    // test Customer class
    @Test void testUsername() {
        Customer customer = new Customer("CustomerInfo.csv");
        String username = "user1";
        customer.setUsername(username);
        assertTrue(customer.checkUsernameExists(), "Username 'user1' should exist.");
        assertEquals(customer.getUsername(), username, "Should be able to retrieve username after setting username.");
    }

    @Test void checkValidLogin() {
        Customer customer = new Customer("CustomerInfo.csv");
        String username = "user1";
        char[] password = {'p', 'a', 's', 's', '1'};
        customer.setUsername(username);
        customer.setPassword(password);
        assertTrue(customer.checkValidLogin(), "Login with 'user1' and 'pass1' should be valid.");
    }

    @Test void testPassword() {
        Customer customer = new Customer("CustomerInfoTest.csv");
        char[] password = {'p', 'a', 's', 's', 'w', 'o', 'r', 'd', '2'};
        customer.setPassword(password);
        assertEquals(customer.getPassword(), password, "Should be able to retrieve password after setting password.");
        assertEquals(customer.getPasswordLength(), 9, "Length of 'password2' password should be 9.");

    }

    @Test void testAddToCSV() {
        Customer customer = new Customer("CustomerInfoTest.csv");
        String username = "user1";
        char[] password = {'p', 'a', 's', 's', '1'};
        customer.setUsername(username);
        customer.setPassword(password);
        customer.addToCSV();
        assertTrue(customer.checkUsernameExists());
    }

//    @Test void testCountDown() {
//        Customer customer = new Customer("CustomerInfo.csv");
//        customer.countDown();
//    }

    // Test Snacks
    @Test void testDisplay() {
        Snacks snacks = new Snacks();
        Snacks.displayDrinks();
        Snacks.displayChocolates();
        Snacks.displayChips();
        Snacks.displayCandies();
//         Snacks.getObjectByCode(1);
    }

    @Test void createSnack() {
        String[] snack_info = {"Mineral Water","1","drinks","7","1.29"};
        Snacks snack = Snacks.createSnack(snack_info);
        assertEquals(snack.getSnackName(), "Mineral Water");
        assertEquals(snack.getSnackCode(), "1");
        assertEquals(snack.getSnackCategory(), "drinks");
        assertEquals(snack.getSnackQuantity(), "7");
        assertEquals(snack.getSnackPrice(), "1.29");
        assertFalse(snack.checkQuantity());
        String[] soft_drink_info = {"Soft drink","2","drinks","0","1.50"};
        Snacks soft_drink = Snacks.createSnack(soft_drink_info);
        assertEquals(soft_drink.getSnackName(), "Soft drink");
        assertEquals(soft_drink.getSnackCode(), "2");
        assertEquals(soft_drink.getSnackCategory(), "drinks");
        assertEquals(soft_drink.getSnackQuantity(), "0");
        assertEquals(soft_drink.getSnackPrice(), "1.5");
        Cart cart = new Cart();
        Snacks.SnackRemove(1, cart);
        Snacks.getObjectByCode(1, cart);
        cart.addItem(snack);
        cart.getTotal();
        cart.displayCart();
        cart.removeItem(snack);
        assertFalse(soft_drink.checkQuantity());
        String[] mars_info = {"Mars bar","21","chocolates","20","1.35"};
        Snacks mars = Snacks.createSnack(mars_info);
        assertEquals(mars.getSnackName(), "Mars bar");
        assertEquals(mars.getSnackCode(), "21");
        assertEquals(mars.getSnackCategory(), "chocolates");
        assertEquals(mars.getSnackQuantity(), "20");
        assertEquals(mars.getSnackPrice(), "1.35");
        assertTrue(mars.checkQuantity());
    }

    @Test void readSnackCSV() {
        List<Snacks> snacks = Snacks.readSnacksFromCSV("Snacksinfo.csv");
    }

    //Test seller
    @Test void sellerEdit() {
        Seller seller = new Seller();
        seller.edit("Snacksinfo.csv", "Mentos", "mentos", "31","candies","10", "1");
    }

    //Test cash payment

//    @Test void returnChange() {
//        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
//        ArrayList<Double> n = new ArrayList<Double>();
//        n.add(Double.parseDouble("1"));
//        n.add(Double.parseDouble("0.5"));
//        assertEquals(cashPay.get_change(1.5, 2), 0.5);
//    }




    @Test void enoughCash() {
        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
        ArrayList<Double> n = new ArrayList<Double>();
        n.add(Double.parseDouble("1"));
        n.add(Double.parseDouble("0.5"));
        assertTrue(cashPay.enough_cash_in(n, 1.29));
    }


//        cashPay.enough_cash_in()
//     @Test void enoughChange() {
//         CashPayment cashPay = new CashPayment("/app/cash_test.csv");
//         ArrayList<Double> n = new ArrayList<Double>();
//         n.add(Double.parseDouble("1"));
//         n.add(Double.parseDouble("0.5"));
//         assertTrue(cashPay.enough_change(n, 1.3));
//     }

    @Test void validDenomination() {
        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
        assertTrue(cashPay.valid_denomination(0.2));
    }

    @Test void noValidDenomination() {
        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
        assertFalse(cashPay.valid_denomination(0.4));
    }

//     @Test void transactionTest() {
//         CashPayment cashPay = new CashPayment("/app/cash_test.csv");
//         ArrayList<Double> n = new ArrayList<Double>();
//         n.add(Double.parseDouble("1"));
//         n.add(Double.parseDouble("0.5"));
//         assertEquals(cashPay.transaction(n,1.3), 0.2);
//     }

    @Test void printChange() {
        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
        ArrayList<Double> n = new ArrayList<Double>();
        n.add(Double.parseDouble("2.5"));
        cashPay.print_change(n);
    }

    @Test void getTotalAmount() {
        CashPayment cashPay = new CashPayment("/app/cash_test.csv");
        ArrayList<Double> n = new ArrayList<Double>();
        n.add(Double.parseDouble("1"));
        n.add(Double.parseDouble("0.5"));
        assertEquals(cashPay.getTotal(n), 1.5);
    }

    // Test credit card payment
//    @Test void matchingCardInfo() {
//        assertTrue(CreditCardPayment.check("Sergio", "42689"));
//    }

    @Test void checkCart() {
        Cart cart = new Cart();
        cart.displayCart();
        assertEquals(0, cart.getTotal());
        assertEquals(0, cart.getSize());
    }
    
     @Test void sellerTest() {
        Seller seller = new Seller();
        seller.displayitems();
        seller.QuantityReport();
        String[] soft_drink_info = {"Soft drink","1","drinks","16","1.29"};
        Snacks soft_drink = Snacks.createSnack(soft_drink_info);
        assertEquals(soft_drink.getSnackName(), "Soft drink");

        seller.edit("Snacksinfo.csv", "Soft drink", "Sprite", "2","drinks", "7", "2.80"); 
        seller.displayitems();

    }

 

    @Test void ownerTest() {
        Owner owner = new Owner();
        owner.setUserRole("user56", "seller");
        owner.setUserRole("user78", "cashier");
        owner.setUserRole("user768", "owner");
        Owner.getUserRole();
    }


    @Test void cashierTest() {
        Cashier cashier = new Cashier("app/cash.csv");
        cashier.change_report();
        cashier.modify_change(10.00, 20);
    }
    
    @Test void falseCreditCardTest() {
        String name = "Imposter";
        String cardNumStr = "42610000";
        
        assertFalse(CreditCardPayment.check(name, cardNumStr));
    }
    
      @Test void CashPaymentConstructor(){
        CashPayment n = new CashPayment("test.csv");
        assertTrue(true);
    }


    @Test void CashPaymentUpdateFile(){
        CashPayment n = new CashPayment("test.csv");
        n.updateFile(new int[11]);
        assertTrue(n.readFile()[0] == 0);
    }

    @Test void CashPaymentReadFile(){
        CashPayment n = new CashPayment("test.csv");
        n.updateFile(new int[11]);
        assertTrue(n.readFile()[3] == 0);
    }

    @Test void CashPaymentFindIndex(){
        CashPayment n = new CashPayment("test.csv");
        assertTrue(n.find_index(5)==6);
    }

    @Test void CashPaymentValid_denimination(){
        CashPayment n = new CashPayment("test.csv");
        assertTrue(n.valid_denomination(0.5));
        assertTrue(!n.valid_denomination(0.4));
    }

    @Test void CashPaymentTransaction(){
        CashPayment n = new CashPayment("test.csv");
        ArrayList<Double> in = new ArrayList<Double>();
        in.add(Double.parseDouble("10"));
        assertTrue(n.enough_cash_in(in,9));
    }

    @Test void CashPaymentEnoughtChange(){
        CashPayment n = new CashPayment("test.csv");
        ArrayList<Double> in = new ArrayList<Double>();
        in.add(Double.parseDouble("0.99"));
        assertFalse(n.enough_change(in,1));
    }

    @Test void CashPaymentgetTotal(){
        CashPayment n = new CashPayment("test.csv");
        ArrayList<Double> in = new ArrayList<Double>();
        in.add(Double.parseDouble("0.99"));
        in.add(Double.parseDouble("9"));
        in.add(Double.parseDouble("0"));
        assertTrue(n.getTotal(in)==9.99);
    }
 
    
    // Test credit card payment
    @Test void matchingCardInfo() {
        assertTrue(!CreditCardPayment.check("Sergio", "42689"));

    }

    @Test void testSaveCard() {

        try {
            FileReader reader = new FileReader("SavedCreditCard.csv");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        CreditCardPayment payment = new CreditCardPayment();

        String[] cardDetails = new String[2];
        cardDetails[0] = "Heather";
        cardDetails[1] = "33221";
        CreditCardPayment.saveCard("user9", "Heather", "33221");
        payment.getCardInfo("user9");
    }

    @Test void testCheckUser() {
        CreditCardPayment cardPay = new CreditCardPayment();
        CreditCardPayment.saveCard("user9", "Heather", "33221");
        assertTrue(!cardPay.checkUser("user4"));
    }

    @Test void testGetCardinfo() {
        CreditCardPayment cardPay = new CreditCardPayment();
        CreditCardPayment.saveCard("user4", "Chad", "34572");

    }


    @Test void transactionTest() {
    
        CashPayment payment = new CashPayment("app/cash.csv");
        ArrayList<Double> cash_list = new ArrayList<Double>();
        ArrayList<Double> change = new ArrayList<Double>();
        cash_list.add(Double.parseDouble("10.00"));
        double total = 5.00;


        change = payment.transaction(cash_list, total);
        change.add(Double.parseDouble("10.00"));
        int[] money = {5,5,5,5,5,5,5,5,5,5,5};
        payment.addCash(money);
    }





}
